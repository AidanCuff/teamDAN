# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ServAlert.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import numpy as np
import image
import PIL
import base64
import requests
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(10, 10, 381, 261))
        self.widget.setObjectName("widget")
        self.reqPictureBtn = QtWidgets.QPushButton(self.centralwidget)
        self.reqPictureBtn.setGeometry(QtCore.QRect(20, 280, 361, 41))
        self.reqPictureBtn.setObjectName("reqPictureBtn")
        self.pictureQuantitySlider = QtWidgets.QSlider(self.centralwidget)
        self.pictureQuantitySlider.setGeometry(QtCore.QRect(30, 360, 341, 22))
        self.pictureQuantitySlider.setOrientation(QtCore.Qt.Horizontal)
        self.pictureQuantitySlider.setObjectName("pictureQuantitySlider")
        self.pictureQuantityLbl = QtWidgets.QLabel(self.centralwidget)
        self.pictureQuantityLbl.setGeometry(QtCore.QRect(40, 330, 321, 20))
        self.pictureQuantityLbl.setObjectName("pictureQuantityLbl")
        self.reqVideoBtn = QtWidgets.QPushButton(self.centralwidget)
        self.reqVideoBtn.setGeometry(QtCore.QRect(20, 410, 361, 41))
        self.reqVideoBtn.setObjectName("reqVideoBtn")
        self.videoLengthSlider = QtWidgets.QSlider(self.centralwidget)
        self.videoLengthSlider.setGeometry(QtCore.QRect(30, 490, 341, 22))
        self.videoLengthSlider.setOrientation(QtCore.Qt.Horizontal)
        self.videoLengthSlider.setObjectName("videoLengthSlider")
        self.videoLengthLbl = QtWidgets.QLabel(self.centralwidget)
        self.videoLengthLbl.setGeometry(QtCore.QRect(40, 460, 321, 20))
        self.videoLengthLbl.setObjectName("videoLengthLbl")
        self.widget_2 = QtWidgets.QWidget(self.centralwidget)
        self.widget_2.setGeometry(QtCore.QRect(400, 10, 381, 261))
        self.widget_2.setObjectName("widget_2")
        self.scrollConsole = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollConsole.setGeometry(QtCore.QRect(400, 330, 381, 211))
        self.scrollConsole.setWidgetResizable(True)
        self.scrollConsole.setObjectName("scrollConsole")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 379, 209))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollConsole.setWidget(self.scrollAreaWidgetContents)
        self.pictureAlertCb = QtWidgets.QCheckBox(self.centralwidget)
        self.pictureAlertCb.setGeometry(QtCore.QRect(410, 290, 161, 20))
        self.pictureAlertCb.setObjectName("pictureAlertCb")
        self.videoAlertCb = QtWidgets.QCheckBox(self.centralwidget)
        self.videoAlertCb.setGeometry(QtCore.QRect(570, 290, 171, 20))
        self.videoAlertCb.setObjectName("videoAlertCb")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menuServAlert = QtWidgets.QMenu(self.menubar)
        self.menuServAlert.setObjectName("menuServAlert")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuServAlert.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.reqPictureBtn.setText(_translate("MainWindow", "Request Picture"))
        self.pictureQuantityLbl.setText(_translate("MainWindow", "Picture Quanitity"))
        self.reqVideoBtn.setText(_translate("MainWindow", "Request Video"))
        self.videoLengthLbl.setText(_translate("MainWindow", "Video Length (seconds)"))
        self.pictureAlertCb.setText(_translate("MainWindow", "Send Me Picture Alerts"))
        self.videoAlertCb.setText(_translate("MainWindow", "Send Me Video Alerts"))
        self.menuServAlert.setTitle(_translate("MainWindow", "ServAlert"))

def videoCap():
    time_ = 600
    vid_cod = cv2.VideoWriter_fourcc(*'XVID')
    output = cv2.VideoWriter("videos/cam_video.mp4", vid_cod, 20.0, (640,480))
    while(1):
        time_-=1
        # Capture each frame of webcam video
        ret,frame = capture.read()
        if not ret:
            break
        cv2.imshow("Recording Video...", frame)
        cv2.moveWindow('Recording Video...',620,210)
        output.write(frame)
        # Close and break the loop after pressing "x" key
        cv2.waitKey(1) & 0xff
        if time_<=0:
            time_ = 600
            output.release()
            break
    #send the video :)
    files = {'file': open('videos/cam_video.mp4', 'rb')}
    requests.post(url, files=files)
    cv2.destroyWindow("Recording Video...")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    url = 'http://92.38.176.13/motion.php'
    capture = cv2.VideoCapture(0)

    fgbg = cv2.createBackgroundSubtractorMOG2(300, 400, True)

    frameCount = 0
    img_counter = 0
    time_ = 0
    videoSent = False

    while(1):
        ret, frame = capture.read()

        if not ret:
            break

        frameCount+=1
        time_-=1

        resizedFrame = cv2.resize(frame, (0, 0), fx=0.50, fy=0.50)

        fgmask = fgbg.apply(resizedFrame)

        count = np.count_nonzero(fgmask)

        print('Frame: %d, Pixel Count: %d' % (frameCount, count))


        if(frameCount>1 and count>5000):
            print('Sufficient Motion Detected')
            cv2.putText(resizedFrame, 'Detected', (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)
            if time_<=0:
                img_name = "opencv_frame_{}.png".format(img_counter)
                cv2.imwrite(img_name, frame)
                #imgArr = base64.b64encode(np.array(PIL.Image.open(img_name))))
                with open(img_name, "rb") as image:
                    f = image.read()
                    b = bytearray(f)
                encoded_string = base64.b64encode(b)
                #url = 'http://92.38.176.13/motion.php'
                myobj = {'IMAGE': encoded_string}
                x = requests.post(url, data = myobj)
                print("{} written!".format(img_name))
                os.unlink(img_name)
                img_counter += 1
                time_ = 1200
                if not videoSent:
                    videoCap()
                    videoSent = True
                
        cv2.imshow('Frame', resizedFrame)
        cv2.moveWindow('Frame',600,240)
        cv2.imshow('Mask', fgmask)
        cv2.moveWindow('Mask',960,240)

        k = cv2.waitKey(1) & 0xff
        if k == 27:
            break
    capture.release()
    cv2.destroyAllWindows()
    sys.exit(app.exec_())
